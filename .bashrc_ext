# -*- mode: sh; sh-shell; bash; -*-
# Personalized bash settings for Daniil Bargman, daniil.bargman@gmail.com #####
# ADD ~source .bashrc_ext~ TO THE END OF .bashrc: 

#################### powerline settings #######################################
#powerline-daemon -q
#POWERLINE_BASH_CONTINUATION=1
#POWERLINE_BASH_SELECT=1
#. /usr/local/lib/python3.4/dist-packages/powerline/bindings/bash/powerline.sh

#################### basic terminal settings ##################################

# Add snap directory to path
PATH=$PATH:/snap/bin

# add XDG config home to environment
export XDG_CONFIG_HOME=$HOME/.config

# SET 256-COLOR SUPPORT IN TERMINAL
export TERM='xterm-256color'

# Set custom prompt
function get_virtualenv {
    envname=$(basename "$CONDA_PREFIX")
    [ "$envname" = "" ] && echo "base" || echo "$envname"
}
function get_k8s_context {
    # [ "$KUBECONFIG" = "" ] && echo "" \
    #   || echo " | k8s-context:$(kubectl config current-context)"
    k8s_context=$(kubectl config current-context 2> /dev/null)
    [ "$k8s_context" = "" ] && echo "no-k8s" || echo "$k8s_context"
}
FG=("\[\033[38;5;74m\]" "\[\033[38;5;79m\]" "\[\033[38;5;136m\]" "\[\033[38;5;142m\]" "\[\033[38;5;220m\]" "\[\033[38;5;250m\]")
BG=("\[\033[48;5;235m\]" "\[\033[48;5;237m\]" "\[\033[48;5;238m\]" "\[\033[48;5;239m\]" "\[\033[48;5;240m\]")
BOLD="\[$(tput bold)\]"
RESET="\[$(tput sgr0)\]"

# prompt with background shading and bold font
# export PS1="\n${FG[-1]}(${FG[2]}\$(get_virtualenv)${FG[-1]}) ${FG[1]}\$(get_k8s_context)${FG[-1]} : ${FG[3]}\w\n${BG[0]}${FG[4]}[\t] ${BOLD}${FG[0]}\u ${FG[-1]}=> \\$""${RESET} "

# prompt without background shading and bold font
export PS1="\n${FG[-1]}(${FG[2]}\$(get_virtualenv)${FG[-1]}) ${FG[1]}\$(get_k8s_context)${FG[-1]} : ${FG[3]}\w\n${FG[4]}[\t] ${FG[0]}\u ${FG[-1]}=> \\$\e[0;97;m "

# Make bash behave more like vim
set -o vi

# still, preserve C-p and C-n for scrolling through history
bind "\C-p":previous-history
bind "\C-n":next-history

#################### vterm / Emacs compatibility settings #####################
# see https://github.com/akermu/emacs-libvterm

# main function
function vterm_printf {
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

#################### convenience maps and shortcuts ###########################

# alias poweroff / reboot to automatically envoke sudo
alias off="sudo poweroff"
alias poweroff="sudo poweroff"
alias reboot="sudo reboot"

# adjust screen brightness
alias brightness="brightnessctl s"

# project launcher directory
executables=~/executables

# Add custom folder with executables to environment
PATH=${PATH//:$executables/}":$executables"

# Make all files in $executables directory executable
for filename in $(echo $executables/*)
do
    chmod u+x $filename
done

# alias herbstclient to hc
alias hc='herbstclient'

# When launching project with vim, disable passthrough of ctrl-s
vim()
{
    local STTYOPTS="$(stty --save)"
    stty stop '' -ixoff
    command vim "$@"
    stty "$STTYOPTS"
}

# export to terminal
export -f vim

# open vim with a session file if one exists
alias vimsession='[[ -e .LastVimSession.vim ]] && vim -S .LastVimSession.vim || vim'

# shortcut to open/close VPN connections and enable/disable UFW
alias lock='wg-quick up wg0'
alias unlock='wg-quick down wg0'

# use human-readable, reverse-chronological directory lists
alias la="ls -lAHFtr --color=always"

# alias update commands
alias update="sudo apt-get update; sudo apt-get -y upgrade; sudo apt-get clean; sudo apt-get -y autoremove"

# alias nmcli d wifi with "wifi"; add BSSID to output for choosing router alias
alias wifi="iwctl station wlan0"

# alias "myip" to get public IP address via curl
alias myip="curl -s ifconfig.co"
alias myip6="curl -s -6 ifconfig.co"

# alias pg to ping google 5 times
alias pg="ping -c 3 google.com"

# reboot key daemon to unblock emacs
alias emacs-keys='ibus-daemon --xim -d -r'

################## KUBERNETES SUPPORT #########################################

if [ "$(which kubectl)" ]; then

    # alias to enable/disable/reset kubernetes
    function disable-k8s {
        sudo echo "draining node and stopping services..."
        kubectl drain $(hostname) --disable-eviction=true --force=true \
            --ignore-daemonsets \
            --delete-emptydir-data # --skip-wait-for-delete-timeout=300
        sudo service kubelet stop
        sudo service docker stop
        sudo service containerd stop
    }
    function enable-k8s {
        [ "$(myip)" = "139.162.214.6" ] || lock
        sudo service containerd start
        sudo service kubelet start
        sleep 60
        kubectl uncordon $(hostname)
    }
    function import-images {
        img_dir="/mnt/projects/statosphere/_aux/containerd-image-backup"
        all_tars=$(ls ${img_dir})
        for i in ${all_tars[@]}; do
        sudo ctr -n k8s.io image import ${img_dir}/$i
        done
    }
    export -f disable-k8s
    export -f enable-k8s
    export -f import-images
    alias kd='disable-k8s'
    alias ke='enable-k8s'
    alias kun='kubectl uncordon $(hostname)'
    alias kr='sudo ctr -n k8s.io c rm $(sudo ctr -n k8s.io c ls -q) && sudo ctr -n k8s.io i rm $(sudo ctr -n k8s.io i ls -q)'
    alias ki='import-images'
    alias km='sudo ctr -n k8s.io c ls'
    function kns {
        kubectl config set-context --current --namespace=$1
    }
    export -f kns

    # kubectl completion and alias
    source <(kubectl completion bash)
    alias k=kubectl
    complete -F __start_kubectl k

fi

############################### VARIOUS #######################################

# add rofi launcher scripts to path
export PATH="$PATH:$HOME/.config/rofi/scripts"

# add user-specific NPM global package directory to path
NPM_GLOBAL="${HOME}/.npm-global"
export PATH="$PATH:$NPM_GLOBAL/bin"
export MANPATH="${MANPATH-$(manpath)}:$NPM_GLOBAL/share/man"

# source conda script
source /opt/conda/etc/profile.d/conda.sh

###############################################################################
source /home/daniil/alacritty/extra/completions/alacritty.bash
