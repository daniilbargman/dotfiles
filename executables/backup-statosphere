# -*- mode: sh; -*-

#!/usr/bin/env bash
# vim: set filetype=sh :
#
# backup statOsphere
#
# Author: Daniil Bargman (daniil.bargman@gmail.com)
#
# base directory of this file accounting for symlinks
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until file is no longer a symlink
    BASE_DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
done
BASE_DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
[ -z "${SCRIPT_NAME:-}" ] && export SCRIPT_NAME="${0##*/}"
###############################################################################

# error-safe script settings
set -Eeuo pipefail

# default message appendix on errors
function append_error {
    bl=${BASH_LINENO[$((${#BASH_LINENO[@]} - 2))]}
    echo line $bl in $BASE_DIR/$SCRIPT_NAME
    exit 1
}

# trap errors from third-party functions
trap append_error ERR

# manual error handler: refer to help flag, and exit (use in place of echo)
function error_exit {
    echo
    echo $1
    append_error
}

# mount drive
sudo mkdir -p /media/daniil/statosphere-backups
sudo mount /dev/sda7 /media/daniil/statosphere-backups 2>&1 || true

# make directory for current date (if one exists and isn't empty, raise error)
target=/media/daniil/statosphere-backups/statOsphere_Backups/$(date +%Y-%m-%d)
mkdir -p $target
[ "$(ls -A $target)" ] && error_exit "$target is not empty."

# copy files
rsync -vr \
      --exclude='*~' \
      --exclude='_aux' \
      --exclude 'services/keycloak/src' \
      --exclude 'services/mailu/_old' \
      --exclude 'services/mailu/mailu-github-repo' \
      --exclude 'infrastructure/k8s/templates/ingress-nginx' \
      --exclude 'node_modules' \
      --exclude '__pycache__' \
      --exclude '.log' \
      --exclude '#*#' \
      /mnt/projects/statosphere $target

# done.
